<script>
let redirectIp = '<%- ip %>:<%- port %>';
let spots = <%- JSON.stringify(spots) %>;
spots.forEach(spot => {
    spot.lowName = spot.name.toLowerCase()
});

function filterSpots(searchString) {
    searchString = searchString.toLowerCase();
    const results = [];
    for (let spot of spots) {
        if (searchString == '' || spot.lowName.includes(searchString)) {
            results.push(spot.name);
            if (results.length >= 10) {
                break;
            }
        }
    }
    return results;
}

const searchBar = document.getElementById("spot-finder-input");

function select(spotName) {
    searchBar.value = spotName;
    const spot = spots.find(spot => spot.name == spotName);
    fetchPrevisions(spot);

    return false;
}

function updateSpots(spots) {
    const dropDown = document.getElementById("dropdown-list");
    let list = '';
    spots.forEach(spot => {
        list += `<button class="dropdown-item" onclick="return select('${spot}')">${spot}</button>`;
    });
    dropDown.innerHTML = list;
    return false
}

function fetchPrevisions(spot) {
    fetch(redirectIp+'/api?id='+spot.id)
        .then(res => {
            res.json().then(res => displayPrevisions(spot, res));
        }, err => {
            displayFetchError();
            setTimeout(() => {
                fetchPrevisions(spot);
            }, 5000);
        });
}

searchBar.addEventListener('keyup', search => {
    if (search.keyCode === 8 && search.target.value.length != 0) {
        return;
    }

    const searchString = search.target.value;
    filteredSearch = filterSpots(searchString);
    updateSpots(filteredSearch);
    if (filteredSearch.length == 1) {
        select(filteredSearch[0]);
    }
});

searchBar.addEventListener('focus', search => {
    if (search.target.value == '') {
        updateSpots(filterSpots(''));
    }
});

const ctx = document.getElementById('myChart').getContext('2d');
const windData = document.getElementById("wind");

function displayFetchError() {
    console.log('error');
}

function displayPrevisions(spot, previsions) {
    console.log(spot);
    console.log(previsions);
    displayWind(previsions.wind.wind);
}

function flush(arr) {
    while (arr.length) {
        arr.pop();
    }
}

function displayWind(wind) {
    let list = '';
    /*
    wind.forEach(data => {
        list += `<p>${data.speed}</p>`;
    });
    */
    let winds = []
    let times = []
    wind.forEach(data => {
        winds.push(data.speed);

        let date = new Date(data.timestamp * 1000);
        times.push(date.getHours() + 'h');
    });

    const data = myChart.data.datasets[0].data;
    const labels = myChart.data.labels;

    flush(data);
    data.push(...winds);
    flush(labels);
    labels.push(...times);

    myChart.update();

   // windData.innerHTML = list;
}

const myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
        datasets: [{
            label: 'Vitesse du Vent en km/h',
            data: [],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>
